* Trashcan üóëÔ∏è

#+html: <a href="https://builtwithnix.org"><img alt="built with nix" src="https://builtwithnix.org/badge.svg" /></a><br>
#+html: <a href="https://github.com/Dr-Nekoma/trashcan/actions/workflows/qemu_build.yml"><img alt="[QEMU] Build" src="https://github.com/Dr-Nekoma/trashcan/actions/workflows/qemu_build.yml/badge.svg" /></a>

This repository contains the server configuration to host applications from
[[https://github.com/Dr-Nekoma][Dr. Nekoma]] and [[https://github.com/dont-rely-on-nulls][Don't Rely on Nulls]]. We currently host the following projects in it:

+ [[https://github.com/Dr-Nekoma/lyceum][Lyceum]]

This is also an ongoing experiment mixing different tools, like [[https://nixos.org/][Nix/NixOS]] (and
[[https://devenv.sh/][devenv]]), [[https://opentofu.org/][OpenTofu]] and [[https://github.com/terrateamio/terrateam][Terrateam]], to name a few.

** Developmennt

Enter the Nix shell via the cli, or leverage direnv:

#+begin_src shell
  # Nix CLI
  nix develop --impure
  # direnv
  direnv allow
#+end_src

*** Setting Up Local Keys

If you dont have any keys setup already:

#+begin_src shell
  cd $HOME/.ssh
  ssh-keygen -t ed25519 -C "your.email@gmail.com"
#+end_src

Then go back to this project and proceed to:

1. Modify the [[./keys/default.nix]] file, add your user and public key there,
   follow the same standard provided by the file.
2. If you also want to add a new secret, modify the [[./secrets/secrets.nix]]. Make
   sure to use "~everyone~" as the public keys.

  #+begin_src shell
    # Either you already have a key in your SSH agent
    agenix -e "my_secret.age"
    # Or if you don't have keys managed by an agent...
    agenix -e "my_secret.age" -i ~/.ssh/your_private_key
  #+end_src

3. Then, rekey everything.

#+begin_src shell
  # Either this...
  agenix --rekey
  # Or...
  agenix --rekey -i $HOME/.ssh/your_private_key
#+end_src

*** Qemu VM

To build a local VM, first proceed to run any of these commands:

#+begin_src shell
  just build-qemu
  # or via an alias
  just bq
  # or if you're REALLY LAZY
  bq
#+end_src

Followed by:

#+begin_src shell
  just run-qemu
  # or via an alias
  just rq
  # or the lazy version...
  rq
#+end_src

When inside the VM, check if a few services are running fine:

#+begin_src shell
  systemctl status sshd.service
#+end_src

Add the following to your ~$HOME/.ssh/config~:

#+begin_src shell
  Host nekoma_vm
    HostName 127.0.0.1
    Port 2222
    StrictHostKeyChecking no
    User your_user
    IdentityFile your_key
#+end_src

then try to login:

#+begin_src shell
  ssh nekoma_vm
#+end_src

*** Custom ISO 

You can also build an ~.iso~ to test with different tools.

#+begin_src shell
  nix build .#iso
#+end_src

** Deployment

*** Provisioning with Terraform

**** AWS

#+begin_src shell
  just plan "aws"
  # or 'pa'
  # followed by
  just apply "aws"
  # or 'aa'
  # if you need to nuke the infra as well
  just destroy "aws"
  # or 'da' 
#+end_src

**** Magalu Cloudu

#+begin_src shell
  just plan "mgc"
  # or 'pm'
  # followed by
  just apply "mgc"
  # or 'am'
  # if you need to nuke the infra as well
  just destroy "mgc"
  # or 'dm' 
#+end_src

*** Deploying with Nix

After provisioning the initial infrastructure, you usually won't need to care
about Terraform anymore, all deploys can be done in pure Nix.

#+begin_src shell
  just deploy
  # or
  deploy
#+end_src

* Acknowledgements

+ The initial Terraform-based (now Open Tofu) bootstrap is a modification from the great setup found in the
  [[https://github.com/Gabriella439/nixos-in-production][NixOS in Production]] book, but was later heavily modified.
+ The Magalu Cloud setup was inspired by [[https://github.com/Misterio77/hackathon-mgc-factorio-terraform][the Declarative Factorio]] repo.
