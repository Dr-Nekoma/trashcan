* Trashcan üóëÔ∏è

#+html: <a href="https://builtwithnix.org"><img alt="built with nix" src="https://builtwithnix.org/badge.svg" /></a><br>
#+html: <a href="https://github.com/Dr-Nekoma/trashcan/actions/workflows/qemu_build.yml"><img alt="[QEMU] Build" src="https://github.com/Dr-Nekoma/trashcan/actions/workflows/qemu_build.yml/badge.svg" /></a>

This repository contains the server configuration to host our applications,
currently we deploy the following projects here:

+ [[https://github.com/Dr-Nekoma/lyceum][Lyceum]]

** Developmennt

Enter the Nix shell via the cli, or leverage direnv:

#+begin_src shell
  # Nix CLI
  nix develop --impure
  # direnv
  direnv allow
#+end_src

*** Qemu VM

#+begin_src shell
  nix build .#qcow
  # Followed by
  nix run .#qemu
  # Now connect to postgres
  sudo --user postgres psql
#+end_src

*** Custom ISO 

You can also build an ~.iso~ to test with different tools.

#+begin_src shell
  nix build .#iso
#+end_src

** Deployment

*** Provisioning with Terraform

#+begin_src shell
  just update-vars
  just plan
  just apply
  # if you need to nuke the infra as well
  just destroy
#+end_src

After the initial terraform deploy, make sure to run:
#+begin_src shell
  just rekey
#+end_src

*** Deploying with Nix

After provisioning the infrastructure, you won't need Terraform anymore, all
deploys can be done in pure Nix.

#+begin_src shell
  just deploy
  # or
  deploy
#+end_src

* Acknowledgements

+ The Terraform-based bootstrap is a modification from the great setup found in the
  [[https://github.com/Gabriella439/nixos-in-production][NixOS in Production]] book.
